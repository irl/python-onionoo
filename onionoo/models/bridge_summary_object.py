# coding: utf-8

"""
    Onionoo

    Onionoo

    OpenAPI spec version: 4.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BridgeSummaryObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'n': 'str',
        'h': 'str',
        'a': 'list[str]',
        'r': 'bool'
    }

    attribute_map = {
        'n': 'n',
        'h': 'h',
        'a': 'a',
        'r': 'r'
    }

    def __init__(self, n=None, h=None, a=None, r=None):
        """
        BridgeSummaryObject - a model defined in Swagger
        """

        self._n = None
        self._h = None
        self._a = None
        self._r = None

        if n is not None:
          self.n = n
        self.h = h
        if a is not None:
          self.a = a
        self.r = r

    @property
    def n(self):
        """
        Gets the n of this BridgeSummaryObject.

        :return: The n of this BridgeSummaryObject.
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """
        Sets the n of this BridgeSummaryObject.

        :param n: The n of this BridgeSummaryObject.
        :type: str
        """

        self._n = n

    @property
    def h(self):
        """
        Gets the h of this BridgeSummaryObject.

        :return: The h of this BridgeSummaryObject.
        :rtype: str
        """
        return self._h

    @h.setter
    def h(self, h):
        """
        Sets the h of this BridgeSummaryObject.

        :param h: The h of this BridgeSummaryObject.
        :type: str
        """
        if h is None:
            raise ValueError("Invalid value for `h`, must not be `None`")

        self._h = h

    @property
    def a(self):
        """
        Gets the a of this BridgeSummaryObject.

        :return: The a of this BridgeSummaryObject.
        :rtype: list[str]
        """
        return self._a

    @a.setter
    def a(self, a):
        """
        Sets the a of this BridgeSummaryObject.

        :param a: The a of this BridgeSummaryObject.
        :type: list[str]
        """

        self._a = a

    @property
    def r(self):
        """
        Gets the r of this BridgeSummaryObject.

        :return: The r of this BridgeSummaryObject.
        :rtype: bool
        """
        return self._r

    @r.setter
    def r(self, r):
        """
        Sets the r of this BridgeSummaryObject.

        :param r: The r of this BridgeSummaryObject.
        :type: bool
        """
        if r is None:
            raise ValueError("Invalid value for `r`, must not be `None`")

        self._r = r

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BridgeSummaryObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
