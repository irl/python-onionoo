# coding: utf-8

"""
    Onionoo

    Onionoo

    OpenAPI spec version: 4.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SummaryDocument(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'next_major_version_scheduled': 'str',
        'build_revision': 'str',
        'relays_published': 'str',
        'relays_skipped': 'float',
        'relays_truncated': 'float',
        'relays': 'list[RelaySummaryObject]',
        'bridges_published': 'str',
        'bridges_skipped': 'float',
        'bridges_truncated': 'float',
        'bridges': 'list[BridgeSummaryObject]'
    }

    attribute_map = {
        'version': 'version',
        'next_major_version_scheduled': 'next_major_version_scheduled',
        'build_revision': 'build_revision',
        'relays_published': 'relays_published',
        'relays_skipped': 'relays_skipped',
        'relays_truncated': 'relays_truncated',
        'relays': 'relays',
        'bridges_published': 'bridges_published',
        'bridges_skipped': 'bridges_skipped',
        'bridges_truncated': 'bridges_truncated',
        'bridges': 'bridges'
    }

    def __init__(self, version=None, next_major_version_scheduled=None, build_revision=None, relays_published=None, relays_skipped=None, relays_truncated=None, relays=None, bridges_published=None, bridges_skipped=None, bridges_truncated=None, bridges=None):
        """
        SummaryDocument - a model defined in Swagger
        """

        self._version = None
        self._next_major_version_scheduled = None
        self._build_revision = None
        self._relays_published = None
        self._relays_skipped = None
        self._relays_truncated = None
        self._relays = None
        self._bridges_published = None
        self._bridges_skipped = None
        self._bridges_truncated = None
        self._bridges = None

        self.version = version
        if next_major_version_scheduled is not None:
          self.next_major_version_scheduled = next_major_version_scheduled
        if build_revision is not None:
          self.build_revision = build_revision
        self.relays_published = relays_published
        if relays_skipped is not None:
          self.relays_skipped = relays_skipped
        if relays_truncated is not None:
          self.relays_truncated = relays_truncated
        self.relays = relays
        self.bridges_published = bridges_published
        if bridges_skipped is not None:
          self.bridges_skipped = bridges_skipped
        if bridges_truncated is not None:
          self.bridges_truncated = bridges_truncated
        self.bridges = bridges

    @property
    def version(self):
        """
        Gets the version of this SummaryDocument.
        Onionoo protocol version string.

        :return: The version of this SummaryDocument.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this SummaryDocument.
        Onionoo protocol version string.

        :param version: The version of this SummaryDocument.
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def next_major_version_scheduled(self):
        """
        Gets the next_major_version_scheduled of this SummaryDocument.
        UTC date (YYYY-MM-DD) when the next major protocol version is scheduled to be deployed. Omitted if no major protocol changes are planned.

        :return: The next_major_version_scheduled of this SummaryDocument.
        :rtype: str
        """
        return self._next_major_version_scheduled

    @next_major_version_scheduled.setter
    def next_major_version_scheduled(self, next_major_version_scheduled):
        """
        Sets the next_major_version_scheduled of this SummaryDocument.
        UTC date (YYYY-MM-DD) when the next major protocol version is scheduled to be deployed. Omitted if no major protocol changes are planned.

        :param next_major_version_scheduled: The next_major_version_scheduled of this SummaryDocument.
        :type: str
        """

        self._next_major_version_scheduled = next_major_version_scheduled

    @property
    def build_revision(self):
        """
        Gets the build_revision of this SummaryDocument.
        Git revision of the Onionoo instance's software used to write this response, which will be omitted if unknown.

        :return: The build_revision of this SummaryDocument.
        :rtype: str
        """
        return self._build_revision

    @build_revision.setter
    def build_revision(self, build_revision):
        """
        Sets the build_revision of this SummaryDocument.
        Git revision of the Onionoo instance's software used to write this response, which will be omitted if unknown.

        :param build_revision: The build_revision of this SummaryDocument.
        :type: str
        """

        self._build_revision = build_revision

    @property
    def relays_published(self):
        """
        Gets the relays_published of this SummaryDocument.
        UTC timestamp (YYYY-MM-DD hh:mm:ss) when the last known relay network status consensus started being valid. Indicates how recent the relay objects in this document are.

        :return: The relays_published of this SummaryDocument.
        :rtype: str
        """
        return self._relays_published

    @relays_published.setter
    def relays_published(self, relays_published):
        """
        Sets the relays_published of this SummaryDocument.
        UTC timestamp (YYYY-MM-DD hh:mm:ss) when the last known relay network status consensus started being valid. Indicates how recent the relay objects in this document are.

        :param relays_published: The relays_published of this SummaryDocument.
        :type: str
        """
        if relays_published is None:
            raise ValueError("Invalid value for `relays_published`, must not be `None`")

        self._relays_published = relays_published

    @property
    def relays_skipped(self):
        """
        Gets the relays_skipped of this SummaryDocument.
        Number of skipped relays as requested by a positive \"offset\" parameter value. Omitted if zero.

        :return: The relays_skipped of this SummaryDocument.
        :rtype: float
        """
        return self._relays_skipped

    @relays_skipped.setter
    def relays_skipped(self, relays_skipped):
        """
        Sets the relays_skipped of this SummaryDocument.
        Number of skipped relays as requested by a positive \"offset\" parameter value. Omitted if zero.

        :param relays_skipped: The relays_skipped of this SummaryDocument.
        :type: float
        """

        self._relays_skipped = relays_skipped

    @property
    def relays_truncated(self):
        """
        Gets the relays_truncated of this SummaryDocument.
        Number of truncated relays as requested by a positive \"limit\" parameter value. Omitted if zero.

        :return: The relays_truncated of this SummaryDocument.
        :rtype: float
        """
        return self._relays_truncated

    @relays_truncated.setter
    def relays_truncated(self, relays_truncated):
        """
        Sets the relays_truncated of this SummaryDocument.
        Number of truncated relays as requested by a positive \"limit\" parameter value. Omitted if zero.

        :param relays_truncated: The relays_truncated of this SummaryDocument.
        :type: float
        """

        self._relays_truncated = relays_truncated

    @property
    def relays(self):
        """
        Gets the relays of this SummaryDocument.

        :return: The relays of this SummaryDocument.
        :rtype: list[RelaySummaryObject]
        """
        return self._relays

    @relays.setter
    def relays(self, relays):
        """
        Sets the relays of this SummaryDocument.

        :param relays: The relays of this SummaryDocument.
        :type: list[RelaySummaryObject]
        """
        if relays is None:
            raise ValueError("Invalid value for `relays`, must not be `None`")

        self._relays = relays

    @property
    def bridges_published(self):
        """
        Gets the bridges_published of this SummaryDocument.
        UTC timestamp (YYYY-MM-DD hh:mm:ss) when the last known bridge network status consensus started being valid. Indicates how recent the relay objects in this document are.

        :return: The bridges_published of this SummaryDocument.
        :rtype: str
        """
        return self._bridges_published

    @bridges_published.setter
    def bridges_published(self, bridges_published):
        """
        Sets the bridges_published of this SummaryDocument.
        UTC timestamp (YYYY-MM-DD hh:mm:ss) when the last known bridge network status consensus started being valid. Indicates how recent the relay objects in this document are.

        :param bridges_published: The bridges_published of this SummaryDocument.
        :type: str
        """
        if bridges_published is None:
            raise ValueError("Invalid value for `bridges_published`, must not be `None`")

        self._bridges_published = bridges_published

    @property
    def bridges_skipped(self):
        """
        Gets the bridges_skipped of this SummaryDocument.
        Number of skipped bridges as requested by a positive \"offset\" parameter value. Omitted if zero.

        :return: The bridges_skipped of this SummaryDocument.
        :rtype: float
        """
        return self._bridges_skipped

    @bridges_skipped.setter
    def bridges_skipped(self, bridges_skipped):
        """
        Sets the bridges_skipped of this SummaryDocument.
        Number of skipped bridges as requested by a positive \"offset\" parameter value. Omitted if zero.

        :param bridges_skipped: The bridges_skipped of this SummaryDocument.
        :type: float
        """

        self._bridges_skipped = bridges_skipped

    @property
    def bridges_truncated(self):
        """
        Gets the bridges_truncated of this SummaryDocument.
        Number of truncated bridges as requested by a positive \"limit\" parameter value. Omitted if zero.

        :return: The bridges_truncated of this SummaryDocument.
        :rtype: float
        """
        return self._bridges_truncated

    @bridges_truncated.setter
    def bridges_truncated(self, bridges_truncated):
        """
        Sets the bridges_truncated of this SummaryDocument.
        Number of truncated bridges as requested by a positive \"limit\" parameter value. Omitted if zero.

        :param bridges_truncated: The bridges_truncated of this SummaryDocument.
        :type: float
        """

        self._bridges_truncated = bridges_truncated

    @property
    def bridges(self):
        """
        Gets the bridges of this SummaryDocument.

        :return: The bridges of this SummaryDocument.
        :rtype: list[BridgeSummaryObject]
        """
        return self._bridges

    @bridges.setter
    def bridges(self, bridges):
        """
        Sets the bridges of this SummaryDocument.

        :param bridges: The bridges of this SummaryDocument.
        :type: list[BridgeSummaryObject]
        """
        if bridges is None:
            raise ValueError("Invalid value for `bridges`, must not be `None`")

        self._bridges = bridges

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SummaryDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
